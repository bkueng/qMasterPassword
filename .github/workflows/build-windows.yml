---
name: build-windows

on:
   workflow_call:

jobs:
  build-windows:
    name: Build against Qt ${{ matrix.qt }} on Windows
    runs-on: windows-latest

    strategy:
      matrix:
        qt: [5.15.*, 6.6.*]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version:      ${{ matrix.qt }}
          host:         windows
          target:       desktop
          dir:          ${{ runner.temp }}/qt
          setup-python: false

      - name: Configure
        env:
          WINDEPLOY_DIR: ${{ runner.temp }}/windeploy
          NSIS_DIR: ${{ runner.temp }}/nsis
        run: |
          if (test-path ${{ runner.temp }}/build) { remove-item -recurse -force ${{ runner.temp }}/build }
          cmake -B ${{ runner.temp }}/build .

      - name: Build
        run: |
          cmake --build ${{ runner.temp }}/build --config Release

      - name: Install
        run: |
          if (test-path ${{ runner.temp }}/windeploy) { remove-item -recurse -force ${{ runner.temp }}/windeploy }
          cmake --install ${{ runner.temp }}/build --prefix ${{ runner.temp }}/windeploy

      - name: Run windeployqt
        # @TODO: is there an easy way to determine the libcrypto DLL name
        #        the executable is linked against? For now hard-code the
        #        name that is correct for current GitHub Windows runner.
        run: |
          $env:VCINSTALLDIR="$(vswhere -latest -property installationPath)/VC"
          cmake --build ${{ runner.temp }}/build --config Release --target windeployqt
          copy -verbose -force -path $(get-command libcrypto-1_1-x64.dll).Source -destination ${{ runner.temp }}/windeploy/bin/

      - name: Build installer package
        run: |
          if (test-path ${{ runner.temp }}/nsis) { remove-item -recurse -force ${{ runner.temp }}/nsis }
          mkdir -path ${{ runner.temp }}/nsis
          cmake --build ${{ runner.temp }}/build --config Release --target makensis

      - name: Upload installer package
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: ${{ runner.temp }}/nsis/qMasterPassword.exe
        if: |
          startsWith(matrix.qt, '6')
